#!/bin/bash
export UUID=${UUID:-''} 
export NEZHA_SERVER=${NEZHA_SERVER:-''} # 哪吒3个变量不全不运行
export NEZHA_PORT=${NEZHA_PORT:-'443'} # 哪吒端口为{443,8443,2096,2087,2083,2053}其中之一时开启tls    
export NEZHA_KEY=${NEZHA_KEY:-''}      # 哪吒客户端密钥
export ARGO_DOMAIN=${ARGO_DOMAIN:-''}  # 固定隧道域名，留空即启用临时隧道
export ARGO_AUTH=${ARGO_AUTH:-''}     # 固定json或token，留空即启用临时隧道
export CFIP=${CFIP:-'na.ma'}          # 优选域名或优选ip
export CFPORT=${CFPORT:-'443'}       # 节点端口
export NAME=${NAME:-''}            # 节点名称前缀
export FILE_PATH=${FILE_PATH:-'./temp'} # 节点文件存放路径，运行文件夹，若需要改，index.js中也需要和此处一致，否则无法订阅
export ARGO_PORT=${ARGO_PORT:-'8001'}  # Argo端口，使用固定隧道token需在cf后台设置的端口和这里一致

echo "aWYgWyAhIC1kICIke0ZJTEVfUEFUSH0iIF07IHRoZW4KICAgIG1rZGlyICR7RklMRV9QQVRIfQpmaQoKY2xlYW51cF9vbGRmaWxlcygpIHsKICBybSAtcmYgJHtGSUxFX1BBVEh9L2Jvb3QubG9nICR7RklMRV9QQVRIfS9zdWIudHh0ICR7RklMRV9QQVRIfS9jb25maWcuanNvbiAke0ZJTEVfUEFUSH0vdHVubmVsLmpzb24gJHtGSUxFX1BBVEh9L3R1bm5lbC55bWwKfQpjbGVhbnVwX29sZGZpbGVzCndhaXQKCmFyZ29fY29uZmlndXJlKCkgewogIGlmIFtbIC16ICRBUkdPX0FVVEggfHwgLXogJEFSR09fRE9NQUlOIF1dOyB0aGVuCiAgICBlY2hvIC1lICJcZVsxOzMybUFSR09fRE9NQUlOIG9yIEFSR09fQVVUSCB2YXJpYWJsZSBpcyBlbXB0eSwgdXNlIHF1aWNrIHR1bm5lbHNcZVswbSIKICAgIHJldHVybgogIGZpCgogIGlmIFtbICRBUkdPX0FVVEggPX4gVHVubmVsU2VjcmV0IF1dOyB0aGVuCiAgICBlY2hvICRBUkdPX0FVVEggPiAke0ZJTEVfUEFUSH0vdHVubmVsLmpzb24KICAgIGNhdCA+ICR7RklMRV9QQVRIfS90dW5uZWwueW1sIDw8IEVPRgp0dW5uZWw6ICQoY3V0IC1kXCIgLWYxMiA8PDwgIiRBUkdPX0FVVEgiKQpjcmVkZW50aWFscy1maWxlOiAke0ZJTEVfUEFUSH0vdHVubmVsLmpzb24KcHJvdG9jb2w6IGh0dHAyCgppbmdyZXNzOgogIC0gaG9zdG5hbWU6ICRBUkdPX0RPTUFJTgogICAgc2VydmljZTogaHR0cDovL2xvY2FsaG9zdDokQVJHT19QT1JUCiAgICBvcmlnaW5SZXF1ZXN0OiB7e319CiAgLSBzZXJ2aWNlOiBodHRwX3N0YXR1czo0MDQKRU9GCiAgZWxzZQogICAgZWNobyAtZSAiXGVbMTszMm1BUkdPX0FVVEggbWlzbWF0Y2ggVHVubmVsU2VjcmV0LHVzZSB0b2tlbiBjb25uZWN0IHRvIHR1bm5lbFxlWzBtIgogIGZpCn0KYXJnb19jb25maWd1cmUKd2FpdAoKZ2VuZXJhdGVfY29uZmlnKCkgewogIGNhdCA+ICR7RklMRV9QQVRIfS9jb25maWcuanNvbiA8PCBFT0YKewogICJsb2ciOiB7ICJhY2Nlc3MiOiAiL2Rldi9udWxsIiwgImVycm9yIjogIi9kZXYvbnVsbCIsICJsb2dsZXZlbCI6ICJub25lIiB9LAogICJpbmJvdW5kcyI6IFsKICAgIHsKICAgICAgInBvcnQiOiAkQVJHT19QT1JULAogICAgICAicHJvdG9jb2wiOiAidmxlc3MiLAogICAgICAic2V0dGluZ3MiOiB7CiAgICAgICAgImNsaWVudHMiOiBbeyAiaWQiOiAiJHtVVUlEfSIsICJmbG93IjogInh0bHMtcnByeC12aXNpb24iIH1dLAogICAgICAgICJkZWNyeXB0aW9uIjogIm5vbmUiLAogICAgICAgICJmYWxsYmFja3MiOiBbCiAgICAgICAgICB7ICJkZXN0IjogMzAwMSB9LCB7ICJwYXRoIjogIi92bGVzcy1hcmdvIiwgImRlc3QiOiAzMDAyIH0sCiAgICAgICAgICB7ICJwYXRoIjogIi92bWVzcy1hcmdvIiwgImRlc3QiOiAzMDAzIH0sIHsgInBhdGgiOiAiL3Ryb2phbi1hcmdvIiwgImRlc3QiOiAzMDA0IH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJzdHJlYW1TZXR0aW5ncyI6IHsgIm5ldHdvcmsiOiAidGNwIiB9CiAgICB9LAogICAgewogICAgICAicG9ydCI6IDMwMDEsICJsaXN0ZW4iOiAiMTI3LjAuMC4xIiwgInByb3RvY29sIjogInZsZXNzIiwKICAgICAgInNldHRpbmdzIjogeyAiY2xpZW50cyI6IFt7ICJpZCI6ICIke1VVSUR9IiB9XSwgImRlY3J5cHRpb24iOiAibm9uZSIgfSwKICAgICAgInN0cmVhbVNldHRpbmdzIjogeyAibmV0d29yayI6ICJ3cyIsICJzZWN1cml0eSI6ICJub25lIiB9CiAgICB9LAogICAgewogICAgICAicG9ydCI6IDMwMDIsICJsaXN0ZW4iOiAiMTI3LjAuMC4xIiwgInByb3RvY29sIjogInZsZXNzIiwKICAgICAgInNldHRpbmdzIjogeyAiY2xpZW50cyI6IFt7ICJpZCI6ICIke1VVSUR9IiwgImxldmVsIjogMCB9XSwgImRlY3J5cHRpb24iOiAibm9uZSIgfSwKICAgICAgInN0cmVhbVNldHRpbmdzIjogeyAibmV0d29yayI6ICJ3cyIsICJzZWN1cml0eSI6ICJub25lIiwgIndzU2V0dGluZ3MiOiB7ICJwYXRoIjogIi92bGVzcy1hcmdvIiB9IH0sCiAgICAgICJzbmlmZmluZyI6IHsgImVuYWJsZWQiOiB0cnVlLCAiZGVzdE92ZXJyaWRlIjogWyJodHRwIiwgInRscyIsICJxdWljIl0sICJtZXRhZGF0YU9ubHkiOiBmYWxzZSB9CiAgICB9LAogICAgewogICAgICAicG9ydCI6IDMwMDMsICJsaXN0ZW4iOiAiMTI3LjAuMC4xIiwgInByb3RvY29sIjogInZtZXNzIiwKICAgICAgInNldHRpbmdzIjogeyAiY2xpZW50cyI6IFt7ICJpZCI6ICIke1VVSUR9IiwgImFsdGVySWQiOiAwIH1dIH0sCiAgICAgICJzdHJlYW1TZXR0aW5ncyI6IHsgIm5ldHdvcmsiOiAid3MiLCAid3NTZXR0aW5ncyI6IHsgInBhdGgiOiAiL3ZtZXNzLWFyZ28iIH0gfSwKICAgICAgInNuaWZmaW5nIjogeyAiZW5hYmxlZCI6IHRydWUsICJkZXN0T3ZlcnJpZGUiOiBbImh0dHAiLCAidGxzIiwgInF1aWMiXSwgIm1ldGFkYXRhT25seSI6IGZhbHNlIH0KICAgIH0sCiAgICB7CiAgICAgICJwb3J0IjogMzAwNCwgImxpc3RlbiI6ICIxMjcuMC4wLjEiLCAicHJvdG9jb2wiOiAidHJvamFuIiwKICAgICAgInNldHRpbmdzIjogeyAiY2xpZW50cyI6IFt7ICJwYXNzd29yZCI6ICIke1VVSUR9IiB9XSB9LAogICAgICAic3RyZWFtU2V0dGluZ3MiOiB7ICJuZXR3b3JrIjogIndzIiwgInNlY3VyaXR5IjogIm5vbmUiLCAid3NTZXR0aW5ncyI6IHsgInBhdGgiOiAiL3Ryb2phbi1hcmdvIiB9IH0sCiAgICAgICJzbmlmZmluZyI6IHsgImVuYWJsZWQiOiB0cnVlLCAiZGVzdE92ZXJyaWRlIjogWyJodHRwIiwgInRscyIsICJxdWljIl0sICJtZXRhZGF0YU9ubHkiOiBmYWxzZSB9CiAgICB9CiAgXSwKICAiZG5zIjogeyAic2VydmVycyI6IFsiaHR0cHMrbG9jYWw6Ly84LjguOC44L2Rucy1xdWVyeSJdIH0sCiAgICJvdXRib3VuZHMiOiBbCiAgICAgICAgewogICAgICAgICAgICAicHJvdG9jb2wiOiAiZnJlZWRvbSIsCiAgICAgICAgICAgICJ0YWciOiAiZGlyZWN0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAicHJvdG9jb2wiOiAiYmxhY2tob2xlIiwKICAgICAgICAgICAgInRhZyI6ICJibG9jayIKICAgICAgICB9CiAgICBdCn0KRU9GCn0KZ2VuZXJhdGVfY29uZmlnCndhaXQKCkFSQ0g9JCh1bmFtZSAtbSkgJiYgRE9XTkxPQURfRElSPSIke0ZJTEVfUEFUSH0iICYmIG1rZGlyIC1wICIkRE9XTkxPQURfRElSIiAmJiBGSUxFX0lORk89KCkKaWYgWyAiJEFSQ0giID09ICJhcm0iIF0gfHwgWyAiJEFSQ0giID09ICJhcm02NCIgXSB8fCBbICIkQVJDSCIgPT0gImFhcmNoNjQiIF07IHRoZW4KICAgIEZJTEVfSU5GTz0oImh0dHBzOi8vZ2l0aHViLmNvbS90cmFuY2VkajIwMjIvdGVzdC9yZWxlYXNlcy9kb3dubG9hZC9hcm02NC9ib3QgYm90IiAiaHR0cHM6Ly9naXRodWIuY29tL3RyYW5jZWRqMjAyMi90ZXN0L3JlbGVhc2VzL2Rvd25sb2FkL2FybTY0L3dlYiB3ZWIiICJodHRwczovL2dpdGh1Yi5jb20vdHJhbmNlZGoyMDIyL3Rlc3QvcmVsZWFzZXMvZG93bmxvYWQvYXJtNjQvc3dpdGggbnBtIikKZWxpZiBbICIkQVJDSCIgPT0gImFtZDY0IiBdIHx8IFsgIiRBUkNIIiA9PSAieDg2XzY0IiBdIHx8IFsgIiRBUkNIIiA9PSAieDg2IiBdOyB0aGVuCiAgICBGSUxFX0lORk89KCJodHRwczovL2dpdGh1Yi5jb20vdHJhbmNlZGoyMDIyL3Rlc3QvcmVsZWFzZXMvZG93bmxvYWQvYW1kNjQvYm90IGJvdCIgImh0dHBzOi8vZ2l0aHViLmNvbS90cmFuY2VkajIwMjIvdGVzdC9yZWxlYXNlcy9kb3dubG9hZC9hbWQ2NC93ZWIgd2ViIiAiaHR0cHM6Ly9naXRodWIuY29tL3RyYW5jZWRqMjAyMi90ZXN0L3JlbGVhc2VzL2Rvd25sb2FkL2FtZDY0L3N3aXRoIG5wbSIpCmVsc2UKICAgIGVjaG8gIlVuc3VwcG9ydGVkIGFyY2hpdGVjdHVyZTogJEFSQ0giCiAgICBleGl0IDEKZmkKZm9yIGVudHJ5IGluICIke0ZJTEVfSU5GT1tAXX0iOyBkbwogICAgVVJMPSQoZWNobyAiJGVudHJ5IiB8IGN1dCAtZCAnICcgLWYgMSkKICAgIE5FV19GSUxFTkFNRT0kKGVjaG8gIiRlbnRyeSIgfCBjdXQgLWQgJyAnIC1mIDIpCiAgICBGSUxFTkFNRT0iJERPV05MT0FEX0RJUi8kTkVXX0ZJTEVOQU1FIgogICAgaWYgWyAtZSAiJEZJTEVOQU1FIiBdOyB0aGVuCiAgICAgICAgZWNobyAtZSAiXGVbMTszMm0kRklMRU5BTUUgYWxyZWFkeSBleGlzdHMsU2tpcHBpbmcgZG93bmxvYWRcZVswbSIKICAgIGVsc2UKICAgICAgICBjdXJsIC1MIC1zUyAtbyAiJEZJTEVOQU1FIiAiJFVSTCIKICAgICAgICBlY2hvIC1lICJcZVsxOzMybURvd25sb2FkaW5nICRGSUxFTkFNRVxlWzBtIgogICAgZmkKZG9uZQp3YWl0CgpydW4oKSB7CiAgaWYgWyAtZSAiJHtGSUxFX1BBVEh9L25wbSIgXTsgdGhlbgogICAgY2htb2QgNzc3ICIke0ZJTEVfUEFUSH0vbnBtIgogICAgdGxzUG9ydHM9KCI0NDMiICI4NDQzIiAiMjA5NiIgIjIwODciICIyMDgzIiAiMjA1MyIpCiAgICBpZiBbWyAiJHt0bHNQb3J0c1sqXX0iID1+ICIke05FWkhBX1BPUlR9IiBdXTsgdGhlbgogICAgICBORVpIQV9UTFM9Ii0tdGxzIgogICAgZWxzZQogICAgICBORVpIQV9UTFM9IiIKICAgIGZpCiAgICBpZiBbIC1uICIkTkVaSEFfU0VSVkVSIiBdICYmIFsgLW4gIiRORVpIQV9QT1JUIiBdICYmIFsgLW4gIiRORVpIQV9LRVkiIF07IHRoZW4KICAgICAgICBub2h1cCAiJHtGSUxFX1BBVEh9L25wbSIgLXMgJHtORVpIQV9TRVJWRVJ9OiR7TkVaSEFfUE9SVH0gLXAgJHtORVpIQV9LRVl9ICR7TkVaSEFfVExTfSA+L2Rldi9udWxsIDI+JjEgJgoJCSAgIHNsZWVwIDIKICAgICAgICBlY2hvIC1lICJcZVsxOzMybW5wbSBpcyBydW5uaW5nXGVbMG0iCiAgICBlbHNlCiAgICAgICAgZWNobyAtZSAiXGVbMTszNW1ORVpIQSB2YXJpYWJsZSBpcyBlbXB0eSxza2lwaW5nIHJ1bmluZ1xlWzBtIgogICAgZmkKICBmaQoKICBpZiBbIC1lICIke0ZJTEVfUEFUSH0vd2ViIiBdOyB0aGVuCiAgICBjaG1vZCA3NzcgIiR7RklMRV9QQVRIfS93ZWIiCiAgICBub2h1cCAiJHtGSUxFX1BBVEh9L3dlYiIgLWMgJHtGSUxFX1BBVEh9L2NvbmZpZy5qc29uID4vZGV2L251bGwgMj4mMSAmCgkgc2xlZXAgMgogICAgZWNobyAtZSAiXGVbMTszMm13ZWIgaXMgcnVubmluZ1xlWzBtIgogIGZpCgogIGlmIFsgLWUgIiR7RklMRV9QQVRIfS9ib3QiIF07IHRoZW4KICAgIGNobW9kIDc3NyAiJHtGSUxFX1BBVEh9L2JvdCIKICAgIGlmIFtbICRBUkdPX0FVVEggPX4gXltBLVowLTlhLXo9XXsxMjAsMjUwfSQgXV07IHRoZW4KICAgICAgYXJncz0idHVubmVsIC0tZWRnZS1pcC12ZXJzaW9uIGF1dG8gLS1uby1hdXRvdXBkYXRlIC0tcHJvdG9jb2wgaHR0cDIgcnVuIC0tdG9rZW4gJHtBUkdPX0FVVEh9IgogICAgZWxpZiBbWyAkQVJHT19BVVRIID1+IFR1bm5lbFNlY3JldCBdXTsgdGhlbgogICAgICBhcmdzPSJ0dW5uZWwgLS1lZGdlLWlwLXZlcnNpb24gYXV0byAtLWNvbmZpZyAke0ZJTEVfUEFUSH0vdHVubmVsLnltbCBydW4iCiAgICBlbHNlCiAgICAgIGFyZ3M9InR1bm5lbCAtLWVkZ2UtaXAtdmVyc2lvbiBhdXRvIC0tbm8tYXV0b3VwZGF0ZSAtLXByb3RvY29sIGh0dHAyIC0tbG9nZmlsZSAke0ZJTEVfUEFUSH0vYm9vdC5sb2cgLS1sb2dsZXZlbCBpbmZvIC0tdXJsIGh0dHA6Ly9sb2NhbGhvc3Q6JEFSR09fUE9SVCIKICAgIGZpCiAgICBub2h1cCAiJHtGSUxFX1BBVEh9L2JvdCIgJGFyZ3MgPi9kZXYvbnVsbCAyPiYxICYKICAgIHNsZWVwIDIKICAgIGVjaG8gLWUgIlxlWzE7MzJtYm90IGlzIHJ1bm5pbmdcZVswbSIKICBmaQp9IApydW4Kc2xlZXAgNQoKZnVuY3Rpb24gZ2V0X2FyZ29kb21haW4oKSB7CiAgaWYgW1sgLW4gJEFSR09fQVVUSCBdXTsgdGhlbgogICAgZWNobyAiJEFSR09fRE9NQUlOIgogIGVsc2UKICAgIGdyZXAgLW9FICdodHRwczovL1tbOmFsbnVtOl0rXC4tXStcLnRyeWNsb3VkZmxhcmVcLmNvbScgIiR7RklMRV9QQVRIfS9ib290LmxvZyIgfCBzZWQgJ3NAaHR0cHM6Ly9AQCcKICBmaQp9CgpnZW5lcmF0ZV9saW5rcygpIHsKICBhcmdvZG9tYWluPSQoZ2V0X2FyZ29kb21haW4pCiAgZWNobyAtZSAiXGVbMTszMm1BcmdvRG9tYWluOlxlWzE7MzVtJHthcmdvZG9tYWlufVxlWzBtIgogIHNsZWVwIDIKCiAgaXNwPSQoY3VybCAtcyBodHRwczovL3NwZWVkLmNsb3VkZmxhcmUuY29tL21ldGEgfCBhd2sgLUZcIiAne3ByaW50ICQyNiItIiQxOH0nIHwgc2VkIC1lICdzLyAvXy9nJykKICBzbGVlcCAyCgogIFZNRVNTPSJ7IFwidlwiOiBcIjJcIiwgXCJwc1wiOiBcIiR7TkFNRX0tJHtpc3B9XCIsIFwiYWRkXCI6IFwiJHtDRklQfVwiLCBcInBvcnRcIjogXCIke0NGUE9SVH1cIiwgXCJpZFwiOiBcIiR7VVVJRH1cIiwgXCJhaWRcIjogXCIwXCIsIFwic2N5XCI6IFwibm9uZVwiLCBcIm5ldFwiOiBcIndzXCIsIFwidHlwZVwiOiBcIm5vbmVcIiwgXCJob3N0XCI6IFwiJHthcmdvZG9tYWlufVwiLCBcInBhdGhcIjogXCIvdm1lc3MtYXJnbz9lZD0yMDQ4XCIsIFwidGxzXCI6IFwidGxzXCIsIFwic25pXCI6IFwiJHthcmdvZG9tYWlufVwiLCBcImFscG5cIjogXCJcIiB9IgoKICBjYXQgPiAke0ZJTEVfUEFUSH0vbGlzdC50eHQgPDxFT0YKdmxlc3M6Ly8ke1VVSUR9QCR7Q0ZJUH06JHtDRlBPUlR9P2VuY3J5cHRpb249bm9uZSZzZWN1cml0eT10bHMmc25pPSR7YXJnb2RvbWFpbn0mdHlwZT13cyZob3N0PSR7YXJnb2RvbWFpbn0mcGF0aD0lMkZ2bGVzcy1hcmdvJTNGZWQlM0QyMDQ4IyR7TkFNRX0tJHtpc3B9Cgp2bWVzczovLyQoZWNobyAiJFZNRVNTIiB8IGJhc2U2NCAtdzApCgp0cm9qYW46Ly8ke1VVSUR9QCR7Q0ZJUH06JHtDRlBPUlR9P3NlY3VyaXR5PXRscyZzbmk9JHthcmdvZG9tYWlufSZ0eXBlPXdzJmhvc3Q9JHthcmdvZG9tYWlufSZwYXRoPSUyRnRyb2phbi1hcmdvJTNGZWQlM0QyMDQ4IyR7TkFNRX0tJHtpc3B9CkVPRgoKICBiYXNlNjQgLXcwICR7RklMRV9QQVRIfS9saXN0LnR4dCA+ICR7RklMRV9QQVRIfS9zdWIudHh0CiAgY2F0ICR7RklMRV9QQVRIfS9zdWIudHh0CiAgZWNobyAtZSAiXG5cZVsxOzMybSR7RklMRV9QQVRIfS9zdWIudHh0IHNhdmVkIHN1Y2Nlc3NmdWxseVxlWzBtIgogIHNsZWVwIDUgIAogIHJtIC1yZiAke0ZJTEVfUEFUSH0vbGlzdC50eHQgJHtGSUxFX1BBVEh9L2Jvb3QubG9nICR7RklMRV9QQVRIfS9jb25maWcuanNvbiAke0ZJTEVfUEFUSH0vdHVubmVsLmpzb24gJHtGSUxFX1BBVEh9L3R1bm5lbC55bWwKfQpnZW5lcmF0ZV9saW5rcwplY2hvIC1lICJcZVsxOzk2bVJ1bm5pbmcgZG9uZSFcZVswbSIKZWNobyAtZSAiXGVbMTs5Nm1UaGFuayB5b3UgZm9yIHVzaW5nIHRoaXMgc2NyaXB0LGVuam95IVxlWzBtIgpzbGVlcCAxMApjbGVhcgoKZWNobyAtZSAiXGVbMTs5Nm1BcHAgaXMgcnVubmluZyFcZVswbSI=" | base64 -d | bash
